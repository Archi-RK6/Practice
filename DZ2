/*Разработать объектно-ориентированную программу для закраски окна алфавитно-цифровой консоли поочередно во все цвета фона в порядке увеличения их escape-кодов. 
Закраска должна производиться в визуально-различимом темпе по рядам окна консоли сверху вниз. 
Чередование фонов должно продолжаться до завершения программы при любом консольном вводе или по сигналу ^C.
При этом должен быть восстановлен исходный фон с очисткой окна консоли. 
Программная реализация должна предусматривать разработку манипуляторов потока стандартного вывода для строк escape-последовательностей. 
Их программный код вместе с классом escape-потока, перегрузкой оператора вывода для его объектов и функцией контроля консольного ввода должен быть сосредоточен в консольном пространстве имен. Цикл перекраски должна кодировать основная функция программы.*/
#include <iostream>
#include <cstring>  
#include <sstream>  
#include <iomanip>  
#include <sys/ioctl.h>  
#include <termios.h>
#include <fcntl.h>  
#include <stdio.h>  
#include <signal.h>
#include <unistd.h>
 
static int done = 0;
 
using namespace std;
 
namespace con
{
	 
	int comax()
	{             //количество столбцов в консоли
		struct winsize w;
		ioctl(0, TIOCGWINSZ, &w);
		return(w.ws_col);
	}                        
	 
	 
	ostream& ED(ostream& s)
	{
		return s << string("\033[2J");    //манипулятор очистки всего терминала
	}
	 
	class estream
	{
		private:
			string escape; //строка escape последовательности
		public:
			estream(string e) : escape(e) {};
			friend ostream& operator<<(ostream&, estream);         //Дружественная перегрузка оператора <<
	};
	 
	 
	ostream& operator<<(ostream& s, estream e)
		{
			s << e.escape << flush;
			return s;
		}
	 
	estream CUP(int y, int x)
	{ //Манипулятор управления курсором
		ostringstream sout;        
		sout << "\033[" << y << ";" << x << "H";  
		return estream(sout.str());    
	}
	 
	estream SGR(int r)  //Манипулятор закраски
	{  
		ostringstream sout;  
		sout << "\033[" << r << "m";
		return estream(sout.str());  
	}
	 
}
 
using con::SGR;
using con::CUP;
using con::comax;
 
void interruptor(int signo)
{
	done = signo;
	return;
} //функция прекращения окраски терминала
 
int kbhit()
{
	int n = 0;
	char buf[512];
	struct termios t[2];
	tcgetattr(0, &t[0]);
	tcgetattr(0, &t[1]);
	t[0].c_lflag &= ~(ICANON | ECHO);
	t[0].c_cc[VMIN] = 0;
	t[0].c_cc[VTIME] = 0;
	tcsetattr(0, TCSANOW, &t[0]);
	n = read(0, buf, 512);
	tcsetattr(0, TCSAFLUSH, &t[1]);
	return(n);
}
 
int main(void)
{
	int stolb = comax();   //количестов столбцов консоли
	int y = 1;           //текущая
	int colour = -1;      //цвета
	signal(SIGINT, interruptor);
 
	while(done < 1)
	{
	 	if(colour <7)
			++colour;
		else
			colour = 0;
		cout << CUP(y,0) << SGR(40 + colour);       //устанавливаем цвет и позицию курсора
		for(int i = 0; i <= stolb; i++)
		{
			cout << " ";
		}
		usleep(120602); //задержка вывода
		y++;
		if(kbhit() > 0) // break any key hit
			break;
	}
	cout << CUP(0, 1) << SGR(0) <<con::ED;      //очитска терминала
	return 0;
}
